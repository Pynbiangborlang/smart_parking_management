---------- TRIGGERS ----------
BEGIN
-- TRIGGER FOR CREATING WALLET FOR USER --
CREATE OR REPLACE FUNCTION CREATE_WALLET_ON_REG_USER()
RETURNS TRIGGER LANGUAGE 'PLPGSQL'
AS $$
BEGIN
    INSERT INTO USER_WALLET(USER_ID, BALANCE) VALUES (NEW.USER_ID, 0);
    RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS;
CREATE TRIGGER CREATE_WALLET_ON_REG_USER_TRIGGER
AFTER INSERT
ON USERS
FOR EACH ROW EXECUTE FUNCTION CREATE_WALLET_ON_REG_USER();

-- TRIGGER FOR ENTRY SENSOR READING ON CHECK-IN --
CREATE OR REPLACE FUNCTION ASSIGN_PARKING_SPACE_TO_USER()
RETURNS TRIGGER LANGUAGE 'PLPGSQL' 
AS $$
DECLARE  
SID INTEGER
UID INTEGER
BEGIN
	IF EXISTS (SELECT MIN(SPACE_ID) INTO SID FROM PARKING_SPACE WHERE STATUS ILIKE 'AVAILABLE' AND SELECT USER_ID INTO UID 
			   FROM USERS WHERE RFID_TAG = CRPTY(NEW.RFID_TAG, RFID_TAG))
	THEN 
	
	INSERT INTO USER_PARKING_HISTORY(USER_ID, SPACE_ID) VALUES (UID, SID)
	RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS;
CREATE TRIGGER ASSIGN_PARKING_SPACE_TO_USER
AFTER INSERT ON GATE_SENSOR_READING
FOR EACH ROW EXECUTE FUNCTION ASSIGN_PARKING_SPACE_TO_USER()
			   
-- TRIGGER FOR CHECK-IN OF VEHICLES --
CREATE OR REPLACE FUNCTION CHECK_IN()
RETURNS TRIGGER LANGUAGE 'PLPGSQL'
AS $$
SID INTEGER
PID INTEGER
BEGIN
    
	IF EXISTS(SELECT PS.SPACE_ID INTO SID FROM
			  PARKING_SENSOR_READING PSR
			  JOIN PARKING_SENSOR PS ON PS.SENSOR_ID = PSR.SENSOR_ID
			  WHERE NEW.SENSOR_ID = PS.SENSOR_ID
			  AND
			  SELECT PARKING_ID INTO PID 
			  FROM USER_PARKING_HISTORY UPH
			  WHERE CHECK_IN =NULL AND CHECK_OUT = NULL AND SPACE_ID=SID) THEN
			    UPDATE USER_PARKING_HISTORY SET CHECK_IN = CURRENT_TIMESTAMP WHERE PARKING_ID=PID;
	END IF;
RETURN NEW;
END;
$$;

DROP TRIGGER CHECK_IN;
CREATE TRIGGER CHECK_IN
AFTER INSERT ON PARKING_SENSOR_READING
FOR EACH ROW EXECUTE FUNCTION CHECK_IN();