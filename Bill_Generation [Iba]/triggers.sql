---------- TRIGGERS ----------
BEGIN;
-- TRIGGER FOR CREATING WALLET FOR USER --
CREATE OR REPLACE FUNCTION parking_schema.CREATE_WALLET_ON_REG_USER()
RETURNS TRIGGER
AS $$
BEGIN
    INSERT INTO parking_schema.USER_WALLET(USER_ID, BALANCE) VALUES (NEW.USER_ID, 0);
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

DROP TRIGGER IF EXISTS CREATE_WALLET_ON_REG_USER ON parking_schema.USERS;
CREATE TRIGGER CREATE_WALLET_ON_REG_USER
AFTER INSERT
ON parking_schema.USERS
FOR EACH ROW EXECUTE FUNCTION parking_schema.CREATE_WALLET_ON_REG_USER();

-- TRIGGER FOR GENERATE BILL OF USER ---------------------------------------
CREATE OR REPLACE FUNCTION parking_schema.GENERATE_BILL_FOR_USER()
RETURNS TRIGGER
AS $$
DECLARE 
  AMOUNT NUMERIC; -- amount to be paid;
  BAL NUMERIC; -- user wallet balance;
  WID INTEGER; -- user wallet id;
BEGIN 
  SELECT (EXTRACT(EPOCH FROM (NEW.CHECK_IN - NEW.CHECK_OUT)) / 60 ) * ST.RATE_PER_MIN INTO AMOUNT 
  FROM parking_schema.PARKING_SPACE PS
  JOIN parking_schema.SPACE_TYPE ST ON ST.TYPE = PS.TYPE
  WHERE PS.SPACE_ID = NEW.SPACE_ID;

  SELECT BALANCE, WALLET_ID INTO BAL, WID FROM parking_schema.USER_WALLET WHERE USER_ID = NEW.USER_ID LIMIT 1;
  IF BAL < AMOUNT THEN
    INSERT INTO parking_schema.BILL (PARKING_ID, WALLET_ID, AMOUNT, DATE, STATUS) VALUES (NEW.PARKING_ID, WID, AMOUNT, CURRENT_TIMESTAMP, 'PENDING');
  ELSE
    -- deduct from wallet
    UPDATE parking_schema.USER_WALLET SET BALANCE = BALANCE - AMOUNT
    WHERE WALLET_ID = WID;
	-- generate the bill
    INSERT INTO parking_schema.BILL (PARKING_ID, WALLET_ID, AMOUNT, DATE, STATUS) VALUES (NEW.PARKING_ID, WID, AMOUNT, CURRENT_TIMESTAMP, 'PAID');
	-- update user wallet history
    INSERT INTO parking_schema.USER_WALLET_HISTORY(TYPE,AMOUNT,DATE,WALLET_ID) VALUES
    ('D', AMOUNT,CURRENT_TIMESTAMP, WID);
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

DROP TRIGGER IF EXISTS TRIGGER_GENERATE_BILL_FOR_USER ON parking_schema.USER_PARKING_HISTORY;
CREATE TRIGGER TRIGGER_GENERATE_BILL_FOR_USER
AFTER UPDATE ON parking_schema.USER_PARKING_HISTORY
FOR EACH ROW
WHEN (NEW.CHECK_OUT IS NOT NULL)
EXECUTE FUNCTION parking_schema.GENERATE_BILL_FOR_USER();

SAVEPOINT SAVEPOINT_02;
-- ROLLBACK, IF REQUIRED
COMMIT;